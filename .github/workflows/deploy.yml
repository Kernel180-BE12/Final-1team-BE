name: Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-24.04  # 고정 런너

    steps:
      - uses: actions/checkout@v4

      - name: Set repo lowercase
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Copy docker compose files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker/production/docker-compose.yml"
          target: "~/app/docker/production"   # ✅ 실제 작업 디렉토리와 일치시키기

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          # port: 22
          script: |
            set -euo pipefail

            # 0) 작업 디렉토리 보강 (복사 경로와 일치)
            mkdir -p ~/app/docker/production
            cd ~/app/docker/production

            # 1) 레지스트리 로그인 (GHCR)
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 2) 이미지 태그 계산
            if [ "${{ github.ref_type }}" = "tag" ]; then
              TAG="${{ github.ref_name }}"
            else
              TAG="latest"
            fi

            # 2-1) docker-compose 변수 주입 (compose 파일이 image: ghcr.io/${REPO_LC}/user-service:${TAG} 를 사용할 때 필요)
            export REPO_LC="${{ env.REPO_LC }}"
            export TAG="$TAG"
            # 원하면 .env로도 주입 가능:
            # printf "REPO_LC=%s\nTAG=%s\n" "${{ env.REPO_LC }}" "$TAG" > .env

            # 3) 이미지 풀 (선택) + Compose 재기동
            IMAGE="ghcr.io/${{ env.REPO_LC }}/user-service:${TAG}"
            docker pull "$IMAGE" || true

            docker compose down --remove-orphans || true
            docker compose up -d --pull always --wait || docker compose up -d --pull always

            # 4) 상태/로그 확인
            sleep 5
            docker compose ps
            docker compose logs --tail=200

            # 5) 디스크 정리(댕글링 이미지)
            docker image prune -f

      - name: Send Discord notification - Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            **배포 성공**
            **Repository:** ${{ env.REPO_LC }}
            **Tag:** ${{ github.ref_name }}
            **Server:** ${{ secrets.SERVER_HOST }}
            **Status:** Success!

      - name: Send Discord notification - Failure
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            **배포 실패**
            **Repository:** ${{ env.REPO_LC }}
            **Tag:** ${{ github.ref_name }}
            **Error:** 배포 중 오류가 발생했습니다.
            **Check:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
