name: Deploy

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Set repo lowercase
        run: echo "REPO_LC=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Copy docker compose file to EC2 (flatten path)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }} # 예: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "docker/production/docker-compose.yml"
          target: "~/app/docker/production"
          strip_components: 2   # <-- docker/production 제거하고 파일만 target에 둠
          overwrite: true

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }} # 예: ubuntu
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -euo pipefail

            # 보장: 작업 디렉토리/파일 존재 확인
            mkdir -p ~/app/docker/production
            ls -al ~/app/docker/production
            test -f ~/app/docker/production/docker-compose.yml || { echo "ERROR: compose file missing"; exit 1; }

            # GHCR 로그인
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # 배포 태그(태그 푸시만 동작한다는 가정)
            if [ "${{ github.ref_type }}" != "tag" ]; then
              echo "Deploy runs only on tag push."; exit 1
            fi
            TAG="${{ github.ref_name }}"

            # compose 변수 주입 (.env로 고정)
            printf "REPO_LC=%s\nTAG=%s\n" "${{ env.REPO_LC }}" "$TAG" > ~/app/docker/production/.env
            cat ~/app/docker/production/.env

            IMAGE="ghcr.io/${{ env.REPO_LC }}/user-service:${TAG}"
            echo "Pulling IMAGE=${IMAGE}"
            docker pull "$IMAGE" || { echo "manifest not found: $IMAGE"; exit 1; }

            # 절대경로로 compose 실행 (CWD 영향 제거)
            docker compose -f ~/app/docker/production/docker-compose.yml down --remove-orphans || true
            docker compose -f ~/app/docker/production/docker-compose.yml up -d --pull always --wait || \
            docker compose -f ~/app/docker/production/docker-compose.yml up -d --pull always

            sleep 5
            docker compose -f ~/app/docker/production/docker-compose.yml ps
            docker compose -f ~/app/docker/production/docker-compose.yml logs --tail=200

            docker image prune -f

      - name: Send Discord notification - Success
        if: success()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            **배포 성공**
            **Repository:** ${{ env.REPO_LC }}
            **Tag:** ${{ github.ref_name }}
            **Server:** ${{ secrets.SERVER_HOST }}
            **Status:** Success!

      - name: Send Discord notification - Failure
        if: failure()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        with:
          args: |
            **배포 실패**
            **Repository:** ${{ env.REPO_LC }}
            **Tag:** ${{ github.ref_name }}
            **Error:** 배포 중 오류가 발생했습니다.
            **Check:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
